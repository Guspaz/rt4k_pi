@using System.Diagnostics
@using System.Net.NetworkInformation
@using System.Net.Sockets
@inherits RazorSliceHttpResult<AppState>
@implements IUsesLayout<_Layout, LayoutModel>

@functions {
    public LayoutModel LayoutModel => new() { Title = "Status" };

    private TimeSpan GetUptime() => TimeSpan.FromSeconds(Stopwatch.GetTimestamp() / Stopwatch.Frequency);

    private string FormatTimeSpan(TimeSpan span) =>
        $"{(span.Days > 0 ? $"{span.Days} day{(span.Days > 1 ? "s" : "")}, " : "")}" +
        $"{(span.Hours > 0 ? $"{span.Hours} hour{(span.Hours > 1 ? "s" : "")}, " : "")}" +
        $"{(span.Minutes > 0 ? $"{span.Minutes} minute{(span.Minutes > 1 ? "s" : "")}, " : "")}" +
        $"{span.Seconds} second{(span.Seconds != 1 ? "s" : "")}".TrimEnd(',', ' ');

    private static string GetLocalIPAddress()
    {
        return NetworkInterface
            .GetAllNetworkInterfaces()
            ?.FirstOrDefault(ni => ni.OperationalStatus == OperationalStatus.Up && (ni.NetworkInterfaceType == NetworkInterfaceType.Ethernet || ni.NetworkInterfaceType == NetworkInterfaceType.Wireless80211))
            ?.GetIPProperties()
            ?.UnicastAddresses
            ?.FirstOrDefault(ua => ua.Address.AddressFamily == AddressFamily.InterNetwork)
            ?.Address
            ?.ToString()
            ?? "Unknown";
    }

    private static Dictionary<string, string> GetMemInfo() =>
        File.ReadLines("/proc/meminfo")
            .Select(l => l.Split(':', 2, StringSplitOptions.TrimEntries))
            .ToDictionary(p => p[0], p => p[1].Split(' ')[0]);

    private static double GetFreeMem()
    {
        var memInfo = GetMemInfo();
        int memTotal = Convert.ToInt32(memInfo["MemTotal"]) + Convert.ToInt32(memInfo["SwapTotal"]);
        int memFree = Convert.ToInt32(memInfo["MemAvailable"]) + Convert.ToInt32(memInfo["SwapFree"]);

        return (double)memFree / memTotal;
    }
}

@{
    var localIP = GetLocalIPAddress();
}

<h2>General</h2>

<div class='w3-panel'>
    <table class='w3-table-all w3-card' style='max-width: 700px;'>
        <tr><th style="width: 25%;">rt4k_pi</th><td>v@(rt4k_pi.Program.VERSION)</td></tr>
        <tr><th>Runtime</th><td>@System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription</td></tr>
        <tr><th>RT4K Connection</th><td>@(Model.Serial?.IsConnected == true ? "Connected" : "Disconnected")</td></tr>
        <tr><th>IP Address</th><td>@localIP</td></tr>
        <tr><th>Hostname</th><td>@(Model.StatusDaemon.Hostname).local</td></tr>

        @if (Model.IsLinux)
        {
            var memFree = GetFreeMem();
            var root = new DriveInfo("/");

            <tr><th>Free Memory</th><td>@((memFree * 100).ToString("F2"))%</td></tr>
            <tr><th>Free Storage</th><td>@(((double)root.AvailableFreeSpace / root.TotalSize * 100).ToString("F2"))%</td></tr>
        }

        <tr><th>Uptime</th><td>@FormatTimeSpan(GetUptime())</td></tr>
    </table>
</div>

<h2>WiFi</h2>

<div class='w3-panel'>
    <table class='w3-table-all w3-card' style='max-width: 700px;'>
        @{
            var wifiInfo = Model.StatusDaemon.WifiStatus;

            if (!string.IsNullOrWhiteSpace(wifiInfo["ssid"]))
            {
                <tr><th style="width: 25%;">SSID</th><td>@wifiInfo["ssid"]</td></tr>
                <tr><th>Signal</th><td>@wifiInfo["signal"]% (@wifiInfo["quality"])</td></tr>
                <tr><th>Speed</th><td>@wifiInfo["rate"]</td></tr>
                <tr><th>Channel</th><td>@wifiInfo["chan"]</td></tr>
            }
            else
            {
                <tr><th>&#x274C; Disconnected/Unknown</th></tr>
            }
        }
    </table>
</div>

<h2>Services</h2>

<div class='w3-panel'>
    <table class='w3-table-all w3-card' style='max-width: 700px;'>
        <tr><th style="width: 25%;">Web</th><td>&#x1F7E2; http://@(Model.StatusDaemon.Hostname).local or http://@localIP</td></tr>
        <tr><th>ser2net</th>
            @if(Model.Ser2net != null)
            {
                <td>&#x1F7E2; @(Model.StatusDaemon.Hostname).local:@Model.Ser2net.Port or @localIP:@Model.Ser2net.Port</td>
            }
            else
            {
                <td>&#x274C; Not running</td>
            }
        </tr>
        <tr><th>File Sharing</th><td>&#x274C; Not implemented</td></tr>
    </table>
</div>